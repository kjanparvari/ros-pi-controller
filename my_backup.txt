#! /usr/bin/env python3
import math

from geometry_msgs.msg import Twist
import rospy
import time
from math import radians
# TF allows to perform transformations between different coordinate frames
import tf
# For getting robotâ€™s ground truth from Gazebo
from gazebo_msgs.srv import GetModelState


class Robot:
    def __init__(self):
        self.kp = 4.
        self.ki = 2.
        self.kt = 5.
        self.d_star = 0.1
        self.dt = .05
        self.l = 0.288
        self.plan = []
        self.path = [(0., 0.)]
        self.theta = 0.
        self.speeds = []

        # Initiate a named node
        rospy.init_node('MoveRobot', anonymous=False)

        # tell user how to stop TurtleBot
        rospy.loginfo("CTRL + C to stop the turtlebot")

        # What function to call when ctrl + c is issued
        rospy.on_shutdown(self.shutdown)

        # subscribe to a service server, provided by the gazebo package to get
        # information about the state of the models present in the simulation
        print("Wait for service ....")
        rospy.wait_for_service("gazebo/get_model_state")
        self.get_ground_truth = rospy.ServiceProxy("/gazebo/get_model_state", GetModelState)

        # Create a Publisher object, will publish on cmd_vel_mux/input/teleop topic
        # to which the robot (real or simulated) is a subscriber
        self.vel_pub = rospy.Publisher('cmd_vel', Twist, queue_size=5)
        self.vel = Twist()
        print("moveRobot node is setup!")

    def path_plan(self):
        number_of_points = 1000
        radius = 2.
        for i in range(number_of_points):
            tmp_angle = 2 * (math.pi / number_of_points) * i
            x = math.cos(tmp_angle) * radius
            y = math.sin(tmp_angle) * radius
            self.plan.append((x, y))

    def shutdown(self):
        print("Shutdown!")
        # stop TurtleBot
        rospy.loginfo("Stop TurtleBot")

        self.vel.linear.x = 0.0
        self.vel.angular.z = 0.0

        self.vel_pub.publish(self.vel)

        # makes sure robot receives the stop command prior to shutting down
        rospy.sleep(1)

    def go(self):
        try:
            self.path_plan()
            for gx, gy in self.plan:
                if rospy.is_shutdown():
                    exit(-1)
                _sum = 0
                while True:
                    gt = self.get_ground_truth("turtlebot3_waffle_pi", "world")
                    # print(f"\nGround Truth: {gt}\n")
                    real_x = gt.pose.position.x
                    real_y = gt.pose.position.y
                    self.theta = real_ori_z = gt.pose.orientation.z

                    print(f"real_x: {real_x}, real_y: {real_y}, real_ori_z: {real_ori_z}, gx: {gx}, gy: {gy}")
                    distance = self.distance(gx, gy, real_x, real_y)
                    if rospy.is_shutdown():
                        exit(-1)
                    if distance < self.d_star:
                        print("\n\n\n\n BREAK \n\n\n\n")
                        break
                    theta_star = math.atan2(gy - real_y, gx - real_x)
                    gamma = self.kt * (theta_star - self.theta)
                    error = distance - self.d_star
                    _sum += error * self.dt
                    self.vel.linear.x = error * self.kp + _sum * self.ki
                    self.path.append((real_x, real_y))

                    self.vel.angular.z = self.vel.linear.x * math.tan(gamma) / self.l
                    # self.vel.angular.z = theta_star
                    print(f"SPEED: linear_x: {self.vel.linear.x}, angular_z: {self.vel.angular.z}")
                    self.vel_pub.publish(self.vel)
                    rospy.sleep(self.dt)
        except:
            rospy.loginfo("move_robot node terminated")

    @staticmethod
    def distance(x1, y1, x2, y2):
        return math.sqrt(((x1 - x2) ** 2) + ((y1 - y2) ** 2))


if __name__ == '__main__':
    Robot().go()
